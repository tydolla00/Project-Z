generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Used during development to connect to dev db
}

model Card {
  id          Int       @id @default(autoincrement()) @map("card_id")
  name        String
  type        String
  image       String
  set         Set       @relation(fields: [setId], references: [id])
  setId       Int       @map("set_id")
  details     Details?
  expansion   String
  pokedex     String
  url         String
  thumbnail   String
  rarity      String   @default("")
  isTradeable Boolean  @default(false) @map("is_tradeable")
  trades      Trade[]    

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Set {
  id          Int      @id @default(autoincrement()) @map("set_id")
  setName     String   @unique
  image       String
  cards       Card[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Details {
  id                Int           @id @default(autoincrement()) @map("details_id")
  hp                Int
  type              String
  weaknessType      WeaknessType? @relation(fields: [weaknessTypeImage, weaknessTypeValue], references: [image, value])
  weaknessTypeImage String?       @map("weakness_type_image")
  weaknessTypeValue String?       @map("weakness_type_value")
  retreatCost       RetreatCost?  @relation(fields: [retreatCostImage, retreatCostCount], references: [image, count])
  retreatCostImage  String?       @map("retreat_cost_image")
  retreatCostCount  Int?          @map("retreat_cost_count")
  card              Card          @relation(fields: [cardId], references: [id])
  cardId            Int           @unique @map("card_id")
}

model WeaknessType {
  image       String
  value       String
  details     Details[]

  @@id(name: "imageValue", [image, value])
}

model RetreatCost {
  image       String
  count       Int
  details     Details[]

  @@id(name: "imageCount", [image, count])
}

// The receiver is the one who will accept the trade
model Trade {
  id              Int         @id @default(autoincrement()) @map("trade_id")
  tradeCreationId String      @unique @map("trade_creation_id")
  playerId        String      @map("player_id")
  cards           Card[]        
  status          TradeStatus @default(ACTIVE)
  identifier      String      // most likely email
  provider        Providers  
  requestedTrades TradeLink[] @relation("RequestingTrade") // trades made by this user. thisUser -> otherUser 
  receivedTrades  TradeLink[] @relation("ReceivingTrade") // trades made by other user. otherUser -> thisUser
  isSeeking       Boolean     @map("is_seeking") // true if the user is looking for cards. false if user is offering cards

  isPrivate       Boolean     @default(false) // true if the user wants the trade to be accepted
  expiresAt       DateTime    @map("expires_at")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

// 
model TradeLink {
  id                  Int           @id @default(autoincrement()) @map("trade_link_id")
  tradeLinkCreationId String        @unique @map("trade_link_creation_id") // the url id
  requestingTrade     Trade         @relation("RequestingTrade", fields: [requestingTradeId], references: [id])
  requestingTradeId   Int           @map("requesting_trade_id")
  receivingTrade      Trade         @relation("ReceivingTrade", fields: [receivingTradeId], references: [id])
  receivingTradeId    Int           @map("receiving_trade_id")
  status              TradeStatus   @default(ACTIVE)

  requestingStatus    TradeStatus   @default(PENDING) @map("requesting_status")
  receivingStatus     TradeStatus   @default(PENDING) @map("receiving_status")
  
  acceptedAt          DateTime?     @map("accepted_at")
  expiresAt           DateTime      @map("expires_at")
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@unique([requestingTradeId, receivingTradeId])
}

enum TradeStatus {
  ACTIVE
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
  EXPIRED
}

enum Providers {
  GOOGLE
  GITHUB
}
